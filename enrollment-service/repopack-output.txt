This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-17T01:38:17.738Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
pom.xml
src/main/java/com/university/enrollmentservice/application/dto/CourseDTO.java
src/main/java/com/university/enrollmentservice/application/dto/StudentDTO.java
src/main/java/com/university/enrollmentservice/application/service/EnrollmentService.java
src/main/java/com/university/enrollmentservice/application/service/EnrollmentServiceImpl.java
src/main/java/com/university/enrollmentservice/domain/model/AvailableCourse.java
src/main/java/com/university/enrollmentservice/domain/model/Enrollment.java
src/main/java/com/university/enrollmentservice/domain/repository/AvailableCourseRepository.java
src/main/java/com/university/enrollmentservice/domain/repository/EnrollmentRepository.java
src/main/java/com/university/enrollmentservice/EnrollmentServiceApplication.java
src/main/java/com/university/enrollmentservice/infrastructure/client/CourseClient.java
src/main/java/com/university/enrollmentservice/infrastructure/client/StudentClient.java
src/main/java/com/university/enrollmentservice/infrastructure/messaging/EnrollmentConsumer.java
src/main/java/com/university/enrollmentservice/presentation/controller/AvailableCourseController.java
src/main/java/com/university/enrollmentservice/presentation/controller/EnrollmentController.java
src/main/resources/application.properties

================================================================
Repository Files
================================================================

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.university</groupId>
        <artifactId>university-management-system</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>enrollment-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.university</groupId>
            <artifactId>common-module</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!-- Other dependencies are inherited from the parent pom.xml -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: src/main/java/com/university/enrollmentservice/application/dto/CourseDTO.java
================
package com.university.enrollmentservice.application.dto;

import lombok.Data;

@Data
public class CourseDTO {
    private Long id;
    private String courseCode;
    private String name;
}

================
File: src/main/java/com/university/enrollmentservice/application/dto/StudentDTO.java
================
package com.university.enrollmentservice.application.dto;

import lombok.Data;

@Data
public class StudentDTO {
    private Long id;
}

================
File: src/main/java/com/university/enrollmentservice/application/service/EnrollmentService.java
================
package com.university.enrollmentservice.application.service;
import com.university.enrollmentservice.application.dto.CourseDTO;
import com.university.enrollmentservice.domain.model.Enrollment;

import java.util.List;

public interface EnrollmentService {
    Enrollment createEnrollment(Enrollment enrollment);
    Enrollment getEnrollmentById(Long id);
    List<Enrollment> getEnrollmentsByStudentId(Long studentId);
    List<Enrollment> getEnrollmentsByCourseId(Long courseId);
    void deleteEnrollment(Long id);
    List<Enrollment> getAllEnrollments();
    void addNewCourseToAvailableCourses(CourseDTO courseDTO);
}

================
File: src/main/java/com/university/enrollmentservice/application/service/EnrollmentServiceImpl.java
================
package com.university.enrollmentservice.application.service;

import com.university.common.exception.ResourceNotFoundException;
import com.university.enrollmentservice.domain.model.Enrollment;
import com.university.enrollmentservice.domain.repository.EnrollmentRepository;
import com.university.enrollmentservice.application.dto.CourseDTO;
import com.university.enrollmentservice.domain.model.AvailableCourse;
import com.university.enrollmentservice.domain.repository.AvailableCourseRepository;
import com.university.enrollmentservice.infrastructure.client.StudentClient;
import com.university.enrollmentservice.infrastructure.client.CourseClient;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class EnrollmentServiceImpl implements EnrollmentService {

    private final EnrollmentRepository enrollmentRepository;
    private final AvailableCourseRepository availableCourseRepository;

    private final StudentClient studentClient;
    private final CourseClient courseClient;

    @Override
    public Enrollment createEnrollment(Enrollment enrollment) {
        // Verify student and course exist
        studentClient.getStudentById(enrollment.getStudentId());
        courseClient.getCourseById(enrollment.getCourseId());

        enrollment.setEnrollmentDate(LocalDate.now());
        enrollment.setStatus("ACTIVE");
        return enrollmentRepository.save(enrollment);
    }

    @Override
    public Enrollment getEnrollmentById(Long id) {
        return enrollmentRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Enrollment", "id", id));
    }

    @Override
    public List<Enrollment> getEnrollmentsByStudentId(Long studentId) {
        return enrollmentRepository.findByStudentId(studentId);
    }

    @Override
    public List<Enrollment> getEnrollmentsByCourseId(Long courseId) {
        return enrollmentRepository.findByCourseId(courseId);
    }

    @Override
    public void deleteEnrollment(Long id) {
        Enrollment enrollment = getEnrollmentById(id);
        enrollmentRepository.delete(enrollment);
    }

    @Override
    public List<Enrollment> getAllEnrollments() {
        return enrollmentRepository.findAll();
    }

    @Override
    public void addNewCourseToAvailableCourses(CourseDTO courseDTO) {
        AvailableCourse availableCourse = new AvailableCourse();
        availableCourse.setCourseId(courseDTO.getId());
        availableCourse.setCourseCode(courseDTO.getCourseCode());
        availableCourse.setCourseName(courseDTO.getName());

        availableCourseRepository.save(availableCourse);

        log.info("Added new course to available courses: {} (ID: {})", courseDTO.getName(), courseDTO.getId());
    }
}

================
File: src/main/java/com/university/enrollmentservice/domain/model/AvailableCourse.java
================
package com.university.enrollmentservice.domain.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class AvailableCourse {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long courseId;
    private String courseCode;
    private String courseName;
}

================
File: src/main/java/com/university/enrollmentservice/domain/model/Enrollment.java
================
package com.university.enrollmentservice.domain.model;

import com.university.common.domain.BaseEntity;
import jakarta.persistence.Entity;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDate;

@Entity
@Table(name = "enrollments")
@Getter
@Setter
public class Enrollment extends BaseEntity {

    @NotNull(message = "Student ID is required")
    private Long studentId;

    @NotNull(message = "Course ID is required")
    private Long courseId;

    @NotNull(message = "Enrollment date is required")
    private LocalDate enrollmentDate;

    private String status;

    @PrePersist
    public void prePersist() {
        if (enrollmentDate == null) {
            enrollmentDate = LocalDate.now();
        }
    }
}

================
File: src/main/java/com/university/enrollmentservice/domain/repository/AvailableCourseRepository.java
================
package com.university.enrollmentservice.domain.repository;

import com.university.enrollmentservice.domain.model.AvailableCourse;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AvailableCourseRepository extends JpaRepository<AvailableCourse, Long> {
}

================
File: src/main/java/com/university/enrollmentservice/domain/repository/EnrollmentRepository.java
================
package com.university.enrollmentservice.domain.repository;

import com.university.enrollmentservice.domain.model.Enrollment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EnrollmentRepository extends JpaRepository<Enrollment, Long> {
    List<Enrollment> findByStudentId(Long studentId);
    List<Enrollment> findByCourseId(Long courseId);
}

================
File: src/main/java/com/university/enrollmentservice/EnrollmentServiceApplication.java
================
package com.university.enrollmentservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients
public class EnrollmentServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(EnrollmentServiceApplication.class, args);
    }
}

================
File: src/main/java/com/university/enrollmentservice/infrastructure/client/CourseClient.java
================
package com.university.enrollmentservice.infrastructure.client;
import com.university.enrollmentservice.application.dto.CourseDTO;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "course-service", url = "${course-service.url}")
public interface CourseClient {

    @GetMapping("/api/courses/{id}")
    CourseDTO getCourseById(@PathVariable("id") Long id);
}

================
File: src/main/java/com/university/enrollmentservice/infrastructure/client/StudentClient.java
================
package com.university.enrollmentservice.infrastructure.client;
import com.university.enrollmentservice.application.dto.StudentDTO;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "student-service", url = "${student-service.url}")
public interface StudentClient {

    @GetMapping("/api/students/{id}")
    StudentDTO getStudentById(@PathVariable("id") Long id);
}

================
File: src/main/java/com/university/enrollmentservice/infrastructure/messaging/EnrollmentConsumer.java
================
package com.university.enrollmentservice.infrastructure.messaging;

import com.university.enrollmentservice.application.dto.CourseDTO;
import com.university.enrollmentservice.application.service.EnrollmentService;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.function.Consumer;

@Configuration
@RequiredArgsConstructor
public class EnrollmentConsumer {

    private final EnrollmentService enrollmentService;

    @Bean
    public Consumer<CourseDTO> courseCreatedConsumer() {
        return enrollmentService::addNewCourseToAvailableCourses;
    }
}

================
File: src/main/java/com/university/enrollmentservice/presentation/controller/AvailableCourseController.java
================
package com.university.enrollmentservice.presentation.controller;

import com.university.enrollmentservice.domain.model.AvailableCourse;
import com.university.enrollmentservice.domain.repository.AvailableCourseRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/available-courses")
@RequiredArgsConstructor
public class AvailableCourseController {

    private final AvailableCourseRepository availableCourseRepository;

    @GetMapping
    public ResponseEntity<List<AvailableCourse>> getAllAvailableCourses() {
        List<AvailableCourse> availableCourses = availableCourseRepository.findAll();
        return ResponseEntity.ok(availableCourses);
    }
}

================
File: src/main/java/com/university/enrollmentservice/presentation/controller/EnrollmentController.java
================
package com.university.enrollmentservice.presentation.controller;

import com.university.enrollmentservice.application.service.EnrollmentService;
import com.university.enrollmentservice.domain.model.Enrollment;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/enrollments")
@RequiredArgsConstructor
public class EnrollmentController {

    private final EnrollmentService enrollmentService;

    @PostMapping
    public ResponseEntity<Enrollment> createEnrollment(@Valid @RequestBody Enrollment enrollment) {
        return new ResponseEntity<>(enrollmentService.createEnrollment(enrollment), HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Enrollment> getEnrollmentById(@PathVariable Long id) {
        return ResponseEntity.ok(enrollmentService.getEnrollmentById(id));
    }

    @GetMapping("/student/{studentId}")
    public ResponseEntity<List<Enrollment>> getEnrollmentsByStudentId(@PathVariable Long studentId) {
        return ResponseEntity.ok(enrollmentService.getEnrollmentsByStudentId(studentId));
    }

    @GetMapping("/course/{courseId}")
    public ResponseEntity<List<Enrollment>> getEnrollmentsByCourseId(@PathVariable Long courseId) {
        return ResponseEntity.ok(enrollmentService.getEnrollmentsByCourseId(courseId));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEnrollment(@PathVariable Long id) {
        enrollmentService.deleteEnrollment(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Enrollment>> getAllEnrollments() {
        return ResponseEntity.ok(enrollmentService.getAllEnrollments());
    }
}

================
File: src/main/resources/application.properties
================
# Application name
spring.application.name=enrollment-service

# Server port
server.port=8083

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:enrollmentdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 Console configuration (optional, for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Spring Cloud Stream configuration
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.kafka.binder.auto-create-topics=true
# For EnrollmentService
spring.cloud.function.definition=courseCreatedConsumer
spring.cloud.stream.bindings.courseCreatedConsumer-in-0.destination=course-created-topic
spring.cloud.stream.bindings.courseCreatedConsumer-in-0.group=enrollment-group
spring.cloud.stream.bindings.courseCreatedConsumer-in-0.content-type=application/json

# Logging configuration
logging.level.com.university.enrollmentservice=DEBUG

# OpenAPI configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Feign client configuration
student-service.url=http://localhost:8081
course-service.url=http://localhost:8082
