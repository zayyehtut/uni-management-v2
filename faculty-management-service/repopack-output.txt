This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-16T00:19:47.810Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
pom.xml
src/main/java/com/university/facultymanagementservice/application/dto/CourseDTO.java
src/main/java/com/university/facultymanagementservice/application/service/CourseAssignmentService.java
src/main/java/com/university/facultymanagementservice/application/service/CourseAssignmentServiceImpl.java
src/main/java/com/university/facultymanagementservice/application/service/FacultyService.java
src/main/java/com/university/facultymanagementservice/application/service/FacultyServiceImpl.java
src/main/java/com/university/facultymanagementservice/domain/model/CourseAssignment.java
src/main/java/com/university/facultymanagementservice/domain/model/Faculty.java
src/main/java/com/university/facultymanagementservice/domain/repository/CourseAssignmentRepository.java
src/main/java/com/university/facultymanagementservice/domain/repository/FacultyRepository.java
src/main/java/com/university/facultymanagementservice/FacultyManagementServiceApplication.java
src/main/java/com/university/facultymanagementservice/infrastructure/client/CourseClient.java
src/main/java/com/university/facultymanagementservice/presentation/controller/CourseAssignmentController.java
src/main/java/com/university/facultymanagementservice/presentation/controller/FacultyController.java
src/main/resources/application.properties

================================================================
Repository Files
================================================================

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.university</groupId>
        <artifactId>university-management-system</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>faculty-management-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.university</groupId>
            <artifactId>common-module</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!-- Other dependencies are inherited from the parent pom.xml -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: src/main/java/com/university/facultymanagementservice/application/dto/CourseDTO.java
================
package com.university.facultymanagementservice.application.dto;

import lombok.Data;

@Data
public class CourseDTO {
    private Long id;
}

================
File: src/main/java/com/university/facultymanagementservice/application/service/CourseAssignmentService.java
================
package com.university.facultymanagementservice.application.service;

import com.university.facultymanagementservice.domain.model.CourseAssignment;

import java.util.List;

public interface CourseAssignmentService {
    CourseAssignment assignCourse(CourseAssignment courseAssignment);
    CourseAssignment getCourseAssignmentById(Long id);
    List<CourseAssignment> getCourseAssignmentsByFacultyId(Long facultyId);
    List<CourseAssignment> getCourseAssignmentsByCourseId(Long courseId);
    void deleteCourseAssignment(Long id);
    List<CourseAssignment> getAllCourseAssignments();
}

================
File: src/main/java/com/university/facultymanagementservice/application/service/CourseAssignmentServiceImpl.java
================
package com.university.facultymanagementservice.application.service;

import com.university.common.exception.ResourceNotFoundException;
import com.university.facultymanagementservice.domain.model.CourseAssignment;
import com.university.facultymanagementservice.domain.repository.CourseAssignmentRepository;
import com.university.facultymanagementservice.infrastructure.client.CourseClient;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CourseAssignmentServiceImpl implements CourseAssignmentService {

    private final CourseAssignmentRepository courseAssignmentRepository;
    private final FacultyService facultyService;
    private final CourseClient courseClient;

    @Override
    public CourseAssignment assignCourse(CourseAssignment courseAssignment) {
        // Verify faculty and course exist
        facultyService.getFacultyById(courseAssignment.getFaculty().getId());
        courseClient.getCourseById(courseAssignment.getCourseId());

        return courseAssignmentRepository.save(courseAssignment);
    }

    @Override
    public CourseAssignment getCourseAssignmentById(Long id) {
        return courseAssignmentRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("CourseAssignment", "id", id));
    }

    @Override
    public List<CourseAssignment> getCourseAssignmentsByFacultyId(Long facultyId) {
        return courseAssignmentRepository.findByFacultyId(facultyId);
    }

    @Override
    public List<CourseAssignment> getCourseAssignmentsByCourseId(Long courseId) {
        return courseAssignmentRepository.findByCourseId(courseId);
    }

    @Override
    public void deleteCourseAssignment(Long id) {
        CourseAssignment courseAssignment = getCourseAssignmentById(id);
        courseAssignmentRepository.delete(courseAssignment);
    }

    @Override
    public List<CourseAssignment> getAllCourseAssignments() {
        return courseAssignmentRepository.findAll();
    }
}

================
File: src/main/java/com/university/facultymanagementservice/application/service/FacultyService.java
================
package com.university.facultymanagementservice.application.service;

import com.university.facultymanagementservice.domain.model.Faculty;

import java.util.List;

public interface FacultyService {
    Faculty createFaculty(Faculty faculty);
    Faculty getFacultyById(Long id);
    Faculty updateFaculty(Long id, Faculty facultyDetails);
    void deleteFaculty(Long id);
    List<Faculty> getAllFaculty();
    Faculty getFacultyByEmail(String email);
}

================
File: src/main/java/com/university/facultymanagementservice/application/service/FacultyServiceImpl.java
================
package com.university.facultymanagementservice.application.service;

import com.university.common.exception.ResourceNotFoundException;
import com.university.facultymanagementservice.domain.model.Faculty;
import com.university.facultymanagementservice.domain.repository.FacultyRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class FacultyServiceImpl implements FacultyService {

    private final FacultyRepository facultyRepository;

    @Override
    public Faculty createFaculty(Faculty faculty) {
        return facultyRepository.save(faculty);
    }

    @Override
    public Faculty getFacultyById(Long id) {
        return facultyRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Faculty", "id", id));
    }

    @Override
    public Faculty updateFaculty(Long id, Faculty facultyDetails) {
        Faculty faculty = getFacultyById(id);
        faculty.setFirstName(facultyDetails.getFirstName());
        faculty.setLastName(facultyDetails.getLastName());
        faculty.setEmail(facultyDetails.getEmail());
        faculty.setDepartment(facultyDetails.getDepartment());
        faculty.setPosition(facultyDetails.getPosition());
        faculty.setSpecialization(facultyDetails.getSpecialization());
        return facultyRepository.save(faculty);
    }

    @Override
    public void deleteFaculty(Long id) {
        Faculty faculty = getFacultyById(id);
        facultyRepository.delete(faculty);
    }

    @Override
    public List<Faculty> getAllFaculty() {
        return facultyRepository.findAll();
    }

    @Override
    public Faculty getFacultyByEmail(String email) {
        return facultyRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("Faculty", "email", email));
    }
}

================
File: src/main/java/com/university/facultymanagementservice/domain/model/CourseAssignment.java
================
package com.university.facultymanagementservice.domain.model;

import com.university.common.domain.BaseEntity;
import jakarta.persistence.Entity;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "course_assignments")
@Getter
@Setter
public class CourseAssignment extends BaseEntity {

    @ManyToOne
    @NotNull(message = "Faculty is required")
    private Faculty faculty;

    @NotNull(message = "Course ID is required")
    private Long courseId;

    private String semester;

    private Integer year;
}

================
File: src/main/java/com/university/facultymanagementservice/domain/model/Faculty.java
================
package com.university.facultymanagementservice.domain.model;

import com.university.common.domain.BaseEntity;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "faculty")
@Getter
@Setter
public class Faculty extends BaseEntity {

    @NotBlank(message = "First name is required")
    private String firstName;

    @NotBlank(message = "Last name is required")
    private String lastName;

    @Email(message = "Invalid email format")
    @NotBlank(message = "Email is required")
    private String email;

    private String department;

    private String position;

    private String specialization;
}

================
File: src/main/java/com/university/facultymanagementservice/domain/repository/CourseAssignmentRepository.java
================
package com.university.facultymanagementservice.domain.repository;

import com.university.facultymanagementservice.domain.model.CourseAssignment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CourseAssignmentRepository extends JpaRepository<CourseAssignment, Long> {
    List<CourseAssignment> findByFacultyId(Long facultyId);
    List<CourseAssignment> findByCourseId(Long courseId);
}

================
File: src/main/java/com/university/facultymanagementservice/domain/repository/FacultyRepository.java
================
package com.university.facultymanagementservice.domain.repository;

import com.university.facultymanagementservice.domain.model.Faculty;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface FacultyRepository extends JpaRepository<Faculty, Long> {
    Optional<Faculty> findByEmail(String email);
}

================
File: src/main/java/com/university/facultymanagementservice/FacultyManagementServiceApplication.java
================
package com.university.facultymanagementservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients
public class FacultyManagementServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(FacultyManagementServiceApplication.class, args);
    }
}

================
File: src/main/java/com/university/facultymanagementservice/infrastructure/client/CourseClient.java
================
package com.university.facultymanagementservice.infrastructure.client;

import com.university.facultymanagementservice.application.dto.CourseDTO;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "course-service", url = "${course-service.url}")
public interface CourseClient {

    @GetMapping("/api/courses/{id}")
    CourseDTO getCourseById(@PathVariable("id") Long id);
}

================
File: src/main/java/com/university/facultymanagementservice/presentation/controller/CourseAssignmentController.java
================
package com.university.facultymanagementservice.presentation.controller;

import com.university.facultymanagementservice.application.service.CourseAssignmentService;
import com.university.facultymanagementservice.domain.model.CourseAssignment;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/course-assignments")
@RequiredArgsConstructor
public class CourseAssignmentController {

    private final CourseAssignmentService courseAssignmentService;

    @PostMapping
    public ResponseEntity<CourseAssignment> assignCourse(@Valid @RequestBody CourseAssignment courseAssignment) {
        return new ResponseEntity<>(courseAssignmentService.assignCourse(courseAssignment), HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<CourseAssignment> getCourseAssignmentById(@PathVariable Long id) {
        return ResponseEntity.ok(courseAssignmentService.getCourseAssignmentById(id));
    }

    @GetMapping("/faculty/{facultyId}")
    public ResponseEntity<List<CourseAssignment>> getCourseAssignmentsByFacultyId(@PathVariable Long facultyId) {
        return ResponseEntity.ok(courseAssignmentService.getCourseAssignmentsByFacultyId(facultyId));
    }

    @GetMapping("/course/{courseId}")
    public ResponseEntity<List<CourseAssignment>> getCourseAssignmentsByCourseId(@PathVariable Long courseId) {
        return ResponseEntity.ok(courseAssignmentService.getCourseAssignmentsByCourseId(courseId));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCourseAssignment(@PathVariable Long id) {
        courseAssignmentService.deleteCourseAssignment(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<CourseAssignment>> getAllCourseAssignments() {
        return ResponseEntity.ok(courseAssignmentService.getAllCourseAssignments());
    }
}

================
File: src/main/java/com/university/facultymanagementservice/presentation/controller/FacultyController.java
================
package com.university.facultymanagementservice.presentation.controller;

import com.university.facultymanagementservice.application.service.FacultyService;
import com.university.facultymanagementservice.domain.model.Faculty;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/faculty")
@RequiredArgsConstructor
public class FacultyController {

    private final FacultyService facultyService;

    @PostMapping
    public ResponseEntity<Faculty> createFaculty(@Valid @RequestBody Faculty faculty) {
        return new ResponseEntity<>(facultyService.createFaculty(faculty), HttpStatus.CREATED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Faculty> getFacultyById(@PathVariable Long id) {
        return ResponseEntity.ok(facultyService.getFacultyById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Faculty> updateFaculty(@PathVariable Long id, @Valid @RequestBody Faculty facultyDetails) {
        return ResponseEntity.ok(facultyService.updateFaculty(id, facultyDetails));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteFaculty(@PathVariable Long id) {
        facultyService.deleteFaculty(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Faculty>> getAllFaculty() {
        return ResponseEntity.ok(facultyService.getAllFaculty());
    }

    @GetMapping("/email/{email}")
    public ResponseEntity<Faculty> getFacultyByEmail(@PathVariable String email) {
        return ResponseEntity.ok(facultyService.getFacultyByEmail(email));
    }
}

================
File: src/main/resources/application.properties
================
# Application name
spring.application.name=faculty-management-service

# Server port
server.port=8084

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:facultydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 Console configuration (optional, for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Logging configuration
logging.level.com.university.facultymanagementservice=DEBUG

# OpenAPI configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Feign client configuration
course-service.url=http://localhost:8082
