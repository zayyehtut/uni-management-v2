This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-16T15:10:28.407Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
pom.xml
src/main/java/com/university/academicrecordsservice/AcademicRecordsServiceApplication.java
src/main/java/com/university/academicrecordsservice/application/dto/CourseDTO.java
src/main/java/com/university/academicrecordsservice/application/dto/CourseGradeDTO.java
src/main/java/com/university/academicrecordsservice/application/dto/SemesterGradeReportDTO.java
src/main/java/com/university/academicrecordsservice/application/dto/StudentDTO.java
src/main/java/com/university/academicrecordsservice/application/dto/TranscriptDTO.java
src/main/java/com/university/academicrecordsservice/application/service/AcademicRecordService.java
src/main/java/com/university/academicrecordsservice/application/service/AcademicRecordServiceImpl.java
src/main/java/com/university/academicrecordsservice/domain/model/AcademicRecord.java
src/main/java/com/university/academicrecordsservice/domain/model/Grade.java
src/main/java/com/university/academicrecordsservice/domain/repository/AcademicRecordRepository.java
src/main/java/com/university/academicrecordsservice/infrastructure/client/CourseClient.java
src/main/java/com/university/academicrecordsservice/infrastructure/client/StudentClient.java
src/main/java/com/university/academicrecordsservice/infrastructure/messaging/AcademicRecordsConsumer.java
src/main/java/com/university/academicrecordsservice/presentation/controller/AcademicRecordController.java
src/main/resources/application.properties

================================================================
Repository Files
================================================================

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.university</groupId>
        <artifactId>university-management-system</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>academic-records-service</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.university</groupId>
            <artifactId>common-module</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!-- Other dependencies are inherited from the parent pom.xml -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

================
File: src/main/java/com/university/academicrecordsservice/AcademicRecordsServiceApplication.java
================
package com.university.academicrecordsservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableFeignClients
public class AcademicRecordsServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(AcademicRecordsServiceApplication.class, args);
    }
}

================
File: src/main/java/com/university/academicrecordsservice/application/dto/CourseDTO.java
================
package com.university.academicrecordsservice.application.dto;

import lombok.Data;

@Data
public class CourseDTO {
    private Long id;
    private String courseCode;
    private String name;
    private String description;
    private int creditHours;
    private String department;
}

================
File: src/main/java/com/university/academicrecordsservice/application/dto/CourseGradeDTO.java
================
package com.university.academicrecordsservice.application.dto;

import lombok.Data;

@Data
public class CourseGradeDTO {
    private Long courseId;
    private String courseCode;
    private String courseName;
    private String grade;
    private Integer creditHours;
    private String department;
}

================
File: src/main/java/com/university/academicrecordsservice/application/dto/SemesterGradeReportDTO.java
================
package com.university.academicrecordsservice.application.dto;

import lombok.Data;
import java.util.List;

@Data
public class SemesterGradeReportDTO {
    private String semester;
    private Integer year;
    private Double semesterGPA;
    private List<CourseGradeDTO> courseGrades;
}

================
File: src/main/java/com/university/academicrecordsservice/application/dto/StudentDTO.java
================
package com.university.academicrecordsservice.application.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class StudentDTO {
    private Long id;
    private String firstName;
    private String lastName;
    private String email;
    private LocalDate dateOfBirth;
    private String address;
    private String phoneNumber;
}

================
File: src/main/java/com/university/academicrecordsservice/application/dto/TranscriptDTO.java
================
package com.university.academicrecordsservice.application.dto;

import lombok.Data;
import java.util.List;

@Data
public class TranscriptDTO {
    private Long studentId;
    private String studentName;
    private String studentEmail;
    private Double cumulativeGPA;
    private List<SemesterGradeReportDTO> semesterReports;
}

================
File: src/main/java/com/university/academicrecordsservice/application/service/AcademicRecordService.java
================
package com.university.academicrecordsservice.application.service;

import com.university.academicrecordsservice.domain.model.AcademicRecord;
import com.university.academicrecordsservice.domain.model.Grade;
import com.university.academicrecordsservice.application.dto.TranscriptDTO;
import com.university.academicrecordsservice.application.dto.SemesterGradeReportDTO;

public interface AcademicRecordService {
    AcademicRecord getAcademicRecordByStudentId(Long studentId);
    AcademicRecord addGrade(Long studentId, Grade grade);
    AcademicRecord updateGrade(Long studentId, Long gradeId, Grade updatedGrade);
    void deleteGrade(Long studentId, Long gradeId);
    double calculateGPA(Long studentId);
    void initializeAcademicRecord(Long studentId);

    // New methods for transcript and semester-wise grade report
    TranscriptDTO generateTranscript(Long studentId);
    SemesterGradeReportDTO generateSemesterGradeReport(Long studentId, String semester, Integer year);
}

================
File: src/main/java/com/university/academicrecordsservice/application/service/AcademicRecordServiceImpl.java
================
package com.university.academicrecordsservice.application.service;

import com.university.academicrecordsservice.domain.model.AcademicRecord;
import com.university.academicrecordsservice.domain.model.Grade;
import com.university.academicrecordsservice.domain.repository.AcademicRecordRepository;
import com.university.academicrecordsservice.infrastructure.client.StudentClient;
import com.university.academicrecordsservice.infrastructure.client.CourseClient;
import com.university.common.exception.ResourceNotFoundException;
import com.university.academicrecordsservice.application.dto.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class AcademicRecordServiceImpl implements AcademicRecordService {

    private final AcademicRecordRepository academicRecordRepository;
    private final StudentClient studentClient;
    private final CourseClient courseClient;

    @Override
    public AcademicRecord getAcademicRecordByStudentId(Long studentId) {
        return academicRecordRepository.findByStudentId(studentId)
                .orElseGet(() -> createNewAcademicRecord(studentId));
    }

    @Override
    public AcademicRecord addGrade(Long studentId, Grade grade) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        validateCourse(grade.getCourseId());
        
        grade.setAcademicRecord(academicRecord);

        academicRecord.addGrade(grade);
        academicRecord.setGpa(calculateGPA(studentId));
        return academicRecordRepository.save(academicRecord);
    }

    @Override
    public AcademicRecord updateGrade(Long studentId, Long gradeId, Grade updatedGrade) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        Grade grade = academicRecord.getGrades().stream()
                .filter(g -> g.getId().equals(gradeId))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("Grade", "id", gradeId));

        grade.setGrade(updatedGrade.getGrade());
        grade.setSemester(updatedGrade.getSemester());
        grade.setYear(updatedGrade.getYear());

        academicRecord.setGpa(calculateGPA(studentId));
        return academicRecordRepository.save(academicRecord);
    }

    @Override
    public void deleteGrade(Long studentId, Long gradeId) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        Grade grade = academicRecord.getGrades().stream()
                .filter(g -> g.getId().equals(gradeId))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("Grade", "id", gradeId));

        academicRecord.removeGrade(grade);
        academicRecord.setGpa(calculateGPA(studentId));
        academicRecordRepository.save(academicRecord);
    }

    @Override
    public double calculateGPA(Long studentId) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        if (academicRecord.getGrades().isEmpty()) {
            return 0.0;
        }

        double totalPoints = 0.0;
        int totalCredits = 0;

        for (Grade grade : academicRecord.getGrades()) {
            double gradePoints = convertGradeToPoints(grade.getGrade());
            int credits = getCourseCredits(grade.getCourseId());

            totalPoints += gradePoints * credits;
            totalCredits += credits;
        }

        return totalCredits > 0 ? totalPoints / totalCredits : 0.0;
    }

    private AcademicRecord createNewAcademicRecord(Long studentId) {
        validateStudent(studentId);
        AcademicRecord newRecord = new AcademicRecord();
        newRecord.setStudentId(studentId);
        newRecord.setGpa(0.0);
        return academicRecordRepository.save(newRecord);
    }

    private void validateStudent(Long studentId) {
        studentClient.getStudentById(studentId);
    }

    private void validateCourse(Long courseId) {
        courseClient.getCourseById(courseId);
    }

    private int getCourseCredits(Long courseId) {  
        CourseDTO course = courseClient.getCourseById(courseId);
        return course.getCreditHours();
    }

    private double convertGradeToPoints(String grade) {
        Map<String, Double> gradePoints = new HashMap<>();
        gradePoints.put("A", 4.0);
        gradePoints.put("B", 3.0);
        gradePoints.put("C", 2.0);
        gradePoints.put("D", 1.0);
        gradePoints.put("F", 0.0);

        return gradePoints.getOrDefault(grade.toUpperCase(), 0.0);
    }

    @Override
    public void initializeAcademicRecord(Long studentId) {
        AcademicRecord newRecord = new AcademicRecord();
        newRecord.setStudentId(studentId);
        newRecord.setGpa(0.0);
        academicRecordRepository.save(newRecord);
        log.info("Initialized academic record for student ID: {}", studentId);
    }

    @Override
    public TranscriptDTO generateTranscript(Long studentId) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        StudentDTO student = studentClient.getStudentById(studentId);
        
        TranscriptDTO transcript = new TranscriptDTO();
        transcript.setStudentId(studentId);
        transcript.setStudentName(student.getFirstName() + " " + student.getLastName());
        transcript.setStudentEmail(student.getEmail());
        transcript.setCumulativeGPA(academicRecord.getGpa());

        Map<String, SemesterGradeReportDTO> semesterReports = new HashMap<>();

        for (Grade grade : academicRecord.getGrades()) {
            String semesterKey = grade.getSemester() + "-" + grade.getYear();
            SemesterGradeReportDTO semesterReport = semesterReports.computeIfAbsent(semesterKey,
                    k -> createSemesterGradeReport(grade.getSemester(), grade.getYear()));

            CourseGradeDTO courseGrade = createCourseGradeDTO(grade);
            semesterReport.getCourseGrades().add(courseGrade);
        }

        for (SemesterGradeReportDTO report : semesterReports.values()) {
            report.setSemesterGPA(calculateSemesterGPA(report.getCourseGrades()));
        }

        transcript.setSemesterReports(new ArrayList<>(semesterReports.values()));
        return transcript;
    }

    @Override
    public SemesterGradeReportDTO generateSemesterGradeReport(Long studentId, String semester, Integer year) {
        AcademicRecord academicRecord = getAcademicRecordByStudentId(studentId);
        SemesterGradeReportDTO report = createSemesterGradeReport(semester, year);

        List<Grade> semesterGrades = academicRecord.getGrades().stream()
                .filter(grade -> grade.getSemester().equals(semester) && grade.getYear().equals(year))
                .collect(Collectors.toList());

        for (Grade grade : semesterGrades) {
            CourseGradeDTO courseGrade = createCourseGradeDTO(grade);
            report.getCourseGrades().add(courseGrade);
        }

        report.setSemesterGPA(calculateSemesterGPA(report.getCourseGrades()));
        return report;
    }

    private SemesterGradeReportDTO createSemesterGradeReport(String semester, Integer year) {
        SemesterGradeReportDTO report = new SemesterGradeReportDTO();
        report.setSemester(semester);
        report.setYear(year);
        report.setCourseGrades(new ArrayList<>());
        return report;
    }

    private CourseGradeDTO createCourseGradeDTO(Grade grade) {
        CourseDTO course = courseClient.getCourseById(grade.getCourseId());
        CourseGradeDTO courseGrade = new CourseGradeDTO();
        courseGrade.setCourseId(grade.getCourseId());
        courseGrade.setCourseCode(course.getCourseCode());
        courseGrade.setCourseName(course.getName());
        courseGrade.setGrade(grade.getGrade());
        courseGrade.setCreditHours(course.getCreditHours());
        courseGrade.setDepartment(course.getDepartment());
        return courseGrade;
    }

    private double calculateSemesterGPA(List<CourseGradeDTO> courseGrades) {
        if (courseGrades.isEmpty()) {
            return 0.0;
        }

        double totalPoints = 0.0;
        int totalCredits = 0;

        for (CourseGradeDTO courseGrade : courseGrades) {
            double gradePoints = convertGradeToPoints(courseGrade.getGrade());
            int credits = courseGrade.getCreditHours();

            totalPoints += gradePoints * credits;
            totalCredits += credits;
        }

        return totalCredits > 0 ? totalPoints / totalCredits : 0.0;
    }
}

================
File: src/main/java/com/university/academicrecordsservice/domain/model/AcademicRecord.java
================
package com.university.academicrecordsservice.domain.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.university.common.domain.BaseEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "academic_records")
@Getter
@Setter
public class AcademicRecord extends BaseEntity {

    @NotNull(message = "Student ID is required")
    private Long studentId;

    @OneToMany(mappedBy = "academicRecord", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<Grade> grades = new ArrayList<>();

    private Double gpa;

    public void addGrade(Grade grade) {
        grades.add(grade);
        grade.setAcademicRecord(this);
    }

    public void removeGrade(Grade grade) {
        grades.remove(grade);
        grade.setAcademicRecord(null);
    }
}

================
File: src/main/java/com/university/academicrecordsservice/domain/model/Grade.java
================
package com.university.academicrecordsservice.domain.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.university.common.domain.BaseEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "grades")
@Getter
@Setter
public class Grade extends BaseEntity {

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "academic_record_id")
    @JsonBackReference
    private AcademicRecord academicRecord;

    @NotNull(message = "Course ID is required")
    private Long courseId;

    @NotNull(message = "Grade value is required")
    private String grade;

    private String semester;

    @Column(name = "`year`")
    private Integer year;
}

================
File: src/main/java/com/university/academicrecordsservice/domain/repository/AcademicRecordRepository.java
================
package com.university.academicrecordsservice.domain.repository;

import com.university.academicrecordsservice.domain.model.AcademicRecord;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface AcademicRecordRepository extends JpaRepository<AcademicRecord, Long> {
    Optional<AcademicRecord> findByStudentId(Long studentId);
}

================
File: src/main/java/com/university/academicrecordsservice/infrastructure/client/CourseClient.java
================
package com.university.academicrecordsservice.infrastructure.client;

import com.university.academicrecordsservice.application.dto.CourseDTO;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "course-service", url = "${course-service.url}")
public interface CourseClient {

    @GetMapping("/api/courses/{id}")
    CourseDTO getCourseById(@PathVariable("id") Long id);
}

================
File: src/main/java/com/university/academicrecordsservice/infrastructure/client/StudentClient.java
================
package com.university.academicrecordsservice.infrastructure.client;

import com.university.academicrecordsservice.application.dto.StudentDTO;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "student-service", url = "${student-service.url}")
public interface StudentClient {

    @GetMapping("/api/students/{id}")
    StudentDTO getStudentById(@PathVariable("id") Long id);
}

================
File: src/main/java/com/university/academicrecordsservice/infrastructure/messaging/AcademicRecordsConsumer.java
================
package com.university.academicrecordsservice.infrastructure.messaging;

import com.university.academicrecordsservice.application.service.AcademicRecordService;
import com.university.academicrecordsservice.application.dto.StudentDTO;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.function.Consumer;

@Configuration
@RequiredArgsConstructor
public class AcademicRecordsConsumer {

    private final AcademicRecordService academicRecordService;

    @Bean
    public Consumer<StudentDTO> studentCreatedConsumer() {
        return studentDTO -> academicRecordService.initializeAcademicRecord(studentDTO.getId());
    }
}

================
File: src/main/java/com/university/academicrecordsservice/presentation/controller/AcademicRecordController.java
================
package com.university.academicrecordsservice.presentation.controller;

import com.university.academicrecordsservice.application.service.AcademicRecordService;
import com.university.academicrecordsservice.domain.model.AcademicRecord;
import com.university.academicrecordsservice.domain.model.Grade;
import com.university.academicrecordsservice.application.dto.TranscriptDTO;
import com.university.academicrecordsservice.application.dto.SemesterGradeReportDTO;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/academic-records")
@RequiredArgsConstructor
public class AcademicRecordController {

    private final AcademicRecordService academicRecordService;

    @GetMapping("/{studentId}")
    public ResponseEntity<AcademicRecord> getAcademicRecord(@PathVariable Long studentId) {
        return ResponseEntity.ok(academicRecordService.getAcademicRecordByStudentId(studentId));
    }

    @PostMapping("/{studentId}/grades")
    public ResponseEntity<AcademicRecord> addGrade(@PathVariable Long studentId, @Valid @RequestBody Grade grade) {
        return new ResponseEntity<>(academicRecordService.addGrade(studentId, grade), HttpStatus.CREATED);
    }

    @PutMapping("/{studentId}/grades/{gradeId}")
    public ResponseEntity<AcademicRecord> updateGrade(
            @PathVariable Long studentId,
            @PathVariable Long gradeId,
            @Valid @RequestBody Grade updatedGrade) {
        return ResponseEntity.ok(academicRecordService.updateGrade(studentId, gradeId, updatedGrade));
    }

    @DeleteMapping("/{studentId}/grades/{gradeId}")
    public ResponseEntity<Void> deleteGrade(@PathVariable Long studentId, @PathVariable Long gradeId) {
        academicRecordService.deleteGrade(studentId, gradeId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{studentId}/gpa")
    public ResponseEntity<Double> calculateGPA(@PathVariable Long studentId) {
        return ResponseEntity.ok(academicRecordService.calculateGPA(studentId));
    }

    @GetMapping("/{studentId}/transcript")
    public ResponseEntity<TranscriptDTO> generateTranscript(@PathVariable Long studentId) {
        return ResponseEntity.ok(academicRecordService.generateTranscript(studentId));
    }

    @GetMapping("/{studentId}/semester-report")
    public ResponseEntity<SemesterGradeReportDTO> generateSemesterGradeReport(
            @PathVariable Long studentId,
            @RequestParam String semester,
            @RequestParam Integer year) {
        return ResponseEntity.ok(academicRecordService.generateSemesterGradeReport(studentId, semester, year));
    }
}

================
File: src/main/resources/application.properties
================
# Application name
spring.application.name=academic-records-service

# Server port
server.port=8085

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:academicrecordsdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 Console configuration (optional, for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA/Hibernate configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Spring Cloud Stream configuration
spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.kafka.binder.auto-create-topics=true
# For AcademicRecordsService
spring.cloud.function.definition=studentCreatedConsumer
spring.cloud.stream.bindings.studentCreatedConsumer-in-0.destination=student-created-topic
spring.cloud.stream.bindings.studentCreatedConsumer-in-0.group=academic-records-group
spring.cloud.stream.bindings.studentCreatedConsumer-in-0.content-type=application/json

# Logging configuration
logging.level.com.university.academicrecordsservice=DEBUG

# OpenAPI configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Feign client configuration
student-service.url=http://localhost:8081
course-service.url=http://localhost:8082
